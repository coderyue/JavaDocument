菜鸟网址：https://www.runoob.com/python3/python3-interpreter.html
python 版本为3.0+

基础语法=================================================================================================================================
	编码
		默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。 当然你也可以为源码文件指定不同的编码：
		eg: # -*- coding: cp-1252 -*-
	标识符
		1、第一个字符必须是字母表中字母或下划线 _ 
		2、标识符的其他的部分由字母、数字和下划线组成。
		3、标识符对大小写敏感
	Python保留字
		>>> import keyword
		>>> keyword.kwlist
		['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
	注释：
		单行注释：#
			eg: # 第一个注释
		多行注释: ''' 或 """
			eg:
				'''
				第三注释
				第四注释
				'''
				 
				"""
				第五注释
				第六注释
				"""
	行和缩进：
		python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。
		缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：eg:
			if True:
				print ("Answer")
				print ("True")
			else:
				print ("Answer")
			  print ("False")    # 缩进不一致，会导致运行错误
	多行语句
		Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠(\)来实现多行语句
			eg:
				total = item_one + \
				item_two + \
				item_three
	数字类型:
		python中数字有四种类型：整数、布尔型、浮点数和复数。int, bool, float, complex(复数 eg: 1+2j 复数的虚部使用j)
	字符串:
		python中单引号和双引号使用完全相同。
		使用三引号('''或""")可以指定一个多行字符串
		反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r"this is a line with \n" 则\n会显示，并不是换行。
		按字面意义级联字符串，如"this" "is" "string"会被自动转换为thisisstring。
		字符串可以用 + 运算符连接在一起，用 * 运算符重复。
		Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。
		Python中的字符串不能改变。
		Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。
		字符串的截取的语法格式如下：变量[头下标:尾下标:步长]
	等待用户输入
		执行下面的程序在按回车键后就会等待用户输入：
		input("\n\n按下 enter 键后退出。")  #括号中的为提示信息
	同一行显示多条语句
		Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：
		eg: 
			import sys; x = 'runoob'; sys.stdout.write(x + '\n')
	多个语句构成代码组
		缩进相同的一组语句构成一个代码块，我们称之代码组。
		像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。
		我们将首行及后面的代码组称为一个子句(clause)。
		eg:
			if expression : 
			   suite
			elif expression : 
			   suite 
			else : 
			   suite
	Print 输出
		print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=""：
		eg:
			x="a"
			# 换行输出
			print( x )
			 
			# 不换行输出
			print( x, end=" " )
			print()
	import 与 from...import
		在 python 用 import 或者 from...import 来导入相应的模块。
		将整个模块(somemodule)导入，格式为： import somemodule
		从某个模块中导入某个函数,格式为： from somemodule import somefunction
		从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc
		将某个模块中的全部函数导入，格式为： from somemodule import *
		eg:
			import sys
			print('================Python import mode==========================');
			print ('命令行参数为:')
			for i in sys.argv:
				print (i)
			print ('\n python 路径为',sys.path)
		eg2:
			from sys import argv,path  #  导入特定的成员
			print('================python from import===================================')
			print('path:',path) # 因为已经导入path成员，所以此处引用时不需要加sys.path

运算符=================================================================================================================================
	Python算术运算符	
		+ - * / 
		* 	乘 - 两个数相乘或是返回一个被重复若干次的字符串
		/ 	除 - x 除以 y  (带小数位)
		% 	取模 - 返回除法的余数
		** 	幂 - 返回x的y次幂   eg: 2**3  结果是2的3次幂
		// 	取整除 - 向下取接近除数的整数
	Python比较运算符
		==	等于 - 比较对象是否相等
		!=	不等于 - 比较两个对象是否不相等
		>  	<	>=	<=	和其他语言判断一致
	Python赋值运算符
		**=	幂赋值运算符
		//=	取整除赋值运算符
		其他和c中一样，eg:+=	-=	%=
	Python位运算符
		按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：
		a = 0011 1100
		b = 0000 1101
		-----------------
		a&b = 0000 1100	与
		a|b = 0011 1101	或
		a^b = 0011 0001	异或
		~a  = 1100 0011	按位取反运算符(取反)

		<< 	左移动运算符：运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。
		>>	右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数
	Python逻辑运算符
		Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:
			and	x and y	布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。		(a and b) 返回 20
			or	x or y	布尔"或" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。			(a or b) 返回 10。
			not	not x	布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。		not(a and b) 返回 False
		eg:
			a = 10
			b = 20
			 
			if ( a and b ):
			   print ("1 - 变量 a 和 b 都为 true")
			else:
			   print ("1 - 变量 a 和 b 有一个不为 true")
	Python成员运算符
		除了以上的一些运算符之外，Python还支持成员运算符
		in	如果在指定的序列中找到值返回 True，否则返回 False。				x 在 y 序列中 , 如果 x 在 y 序列中返回 True。
		not in	如果在指定的序列中没有找到值返回 True，否则返回 False。		x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。
	Python身份运算符
		身份运算符用于比较两个对象的存储单元
		is		is 是判断两个标识符是不是引用自一个对象			x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False
		is not	is not 是判断两个标识符是不是引用自不同对象		x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。
		注： id() 函数用于获取对象内存地址。
		eg:
			a = 20
			b = 20
			if ( a is b ):
			   print ("1 - a 和 b 有相同的标识")
			else:
			   print ("1 - a 和 b 没有相同的标识")
			if ( id(a) == id(b) ):
			   print ("2 - a 和 b 有相同的标识")
			else:
			   print ("2 - a 和 b 没有相同的标识")
	Python运算符优先级(记不住就加括号来确定先计算那个后计算那个)
		以下表格列出了从最高到最低优先级的所有运算符：
		运算符				描述
		**					指数 (最高优先级)
		~ + -				按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
		* / % //			乘，除，取模和取整除
		+ -					加法减法
		>> <<				右移，左移运算符
		&					位 'AND'
		^ |					位运算符
		<= < > >=			比较运算符
		<> == !=			等于运算符
		= %= /= //= -= += *= **=	赋值运算符
		is is not			身份运算符
		in not in			成员运算符
		not and or			逻辑运算符
		
数字(Number)=================================================================================================================================
		Python 数字数据类型用于存储数值。
		数据类型是不允许改变的,这就意味着如果改变数字数据类型的值，将重新分配内存空间。
		以下实例在变量赋值时 Number 对象将被创建：
			var1 = 1
			var2 = 10
		可以使用del语句删除一些数字对象的引用。 				eg: del var1[,var2[,var3[....,varN]]]
		可以通过使用del语句删除单个或多个对象的引用，例如：		eg: del var		del var_a, var_b

		Python 支持三种不同的数值类型
			整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。
			浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）
			复数( (complex)) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。
			我们可以使用十六进制和八进制来代表整数：
				eg:		x 16进制 	o	8进制
					number = 0xA0F # 十六进制
					number=0o37 # 八进制
	Python 数字类型转换
		有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。
		int(x) 将x转换为一个整数。
		float(x) 将x转换到一个浮点数。
		complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。
		complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式
	Python 数字运算
		Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。
	数学函数
		函数			返回值 ( 描述 )
		abs(x)			返回数字的绝对值，如abs(-10) 返回 10
		ceil(x)			返回数字的上入整数，如math.ceil(4.1) 返回 5
		cmp(x, y) 		如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1。 Python 3 已废弃，使用 (x>y)-(x<y) 替换。
		exp(x)			返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045
		fabs(x)			返回数字的绝对值，如math.fabs(-10) 返回10.0
		floor(x)		返回数字的下舍整数，如math.floor(4.9)返回 4
		log(x)			如math.log(math.e)返回1.0,math.log(100,10)返回2.0
		log10(x)		返回以10为基数的x的对数，如math.log10(100)返回 2.0
		max(x1, x2,...)	返回给定参数的最大值，参数可以为序列。
		min(x1, x2,...)	返回给定参数的最小值，参数可以为序列。
		modf(x)			返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。
		pow(x, y)		x**y 运算后的值。
		round(x [,n])	返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。
		sqrt(x)			返回数字x的平方根。
	随机数函数
		随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。
		Python包含以下常用随机数函数：
		函数			描述
		choice(seq)		从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。
		randrange ([start,] stop [,step])	从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1
		random()		随机生成下一个实数，它在[0,1)范围内。
		seed([x])		改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。
		shuffle(lst)	将序列的所有元素随机排序
		uniform(x, y)	随机生成下一个实数，它在[x,y]范围内。
	三角函数
		函数			描述
		acos(x)			返回x的反余弦弧度值。
		asin(x)			返回x的反正弦弧度值。
		atan(x)			返回x的反正切弧度值。
		atan2(y, x)		返回给定的 X 及 Y 坐标值的反正切值。
		cos(x)			返回x的弧度的余弦值。
		hypot(x, y)		返回欧几里德范数 sqrt(x*x + y*y)。
		sin(x)			返回的x弧度的正弦值。
		tan(x)			返回x弧度的正切值。
		degrees(x)		将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0
		radians(x)		将角度转换为弧度
	数学常量
		常量	描述
		pi		数学常量 pi（圆周率，一般以π来表示）
		e		数学常量 e，e即自然常数（自然常数）。

Python3 字符串=================================================================================================================================
	Python 访问字符串中的值
		Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。
		Python 访问子字符串，可以使用方括号来截取字符串 eg:
			var1 = 'Hello World!'
			var2 = "Runoob"
			print ("var1[0]: ", var1[0])
			print ("var2[1:5]: ", var2[1:5])
	Python 字符串更新
		你可以截取字符串的一部分并与其他字段拼接，如下实例：eg:
			var1 = 'Hello World!'
			print ("已更新字符串 : ", var1[:6] + 'Runoob!')
			执行结果：	已更新字符串 :  Hello Runoob!
	Python转义字符
		在需要在字符中使用特殊字符时，python用反斜杠(\)转义字符。	
			转义字符			描述
			\(在行尾时)			续行符
			\\					反斜杠符号
			\'					单引号
			\"					双引号
			\a					响铃
			\b					退格(Backspace)
			\000				空
			\n					换行
			\v					纵向制表符
			\t					横向制表符
			\r					回车
			\f					换页
			\oyy				八进制数，yy 代表的字符，例如：\o12 代表换行，其中 o 是字母，不是数字 0。
			\xyy				十六进制数，yy代表的字符，例如：\x0a代表换行
			\other				其它的字符以普通格式输出
	Python字符串运算符
		下表实例变量a值为字符串 "Hello"，b变量值为 "Python"：
			操作符		描述																		实例
			+			字符串连接																	a + b 输出结果： HelloPython
			*			重复输出字符串																a*2 输出结果：HelloHello
			[]			通过索引获取字符串中字符													a[1] 输出结果 e
			[ : ]		截取字符串中的一部分，遵循左闭右开原则，str[0,2] 是不包含第 3 个字符的。	a[1:4] 输出结果 ell
			in			成员运算符 - 如果字符串中包含给定的字符返回 True							'H' in a 输出结果 True
			not in		成员运算符 - 如果字符串中不包含给定的字符返回 True							'M' not in a 输出结果 True
			r/R			原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，			print( r'\n' )
						没有转义特殊或不能打印的字符。原始字符串除在字符串的第一个引号前			print( R'\n' )
						加上字母 r（可以大小写）以外，与普通字符串有着几乎完全相同的语法。	
			%			格式字符串																	请看下一节内容。
	Python字符串格式化
		Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。
		在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法 eg:
			print ("我叫 %s 今年 %d 岁!" % ('小明', 10))	输出的结果为：我叫 小明 今年 10 岁!
		**python字符串格式化符号:
			 符   号	描述
			  %c	 	格式化字符及其ASCII码
			  %s	 	格式化字符串
			  %d	 	格式化整数
			  %u	 	格式化无符号整型
			  %o	 	格式化无符号八进制数
			  %x	 	格式化无符号十六进制数
			  %X	 	格式化无符号十六进制数（大写）
			  %f	 	格式化浮点数字，可指定小数点后的精度
			  %e	 	用科学计数法格式化浮点数
			  %E	 	作用同%e，用科学计数法格式化浮点数
			  %g	 	%f和%e的简写
			  %G	 	%f 和 %E 的简写
			  %p	 	用十六进制数格式化变量的地址
		格式化操作符辅助指令:？？？？？？？
			符号	功能
			*		定义宽度或者小数点精度
			-		用做左对齐
			+		在正数前面显示加号( + )
			<sp>	在正数前面显示空格
			#		在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')
			0		显示的数字前面填充'0'而不是默认的空格
			%		'%%'输出一个单一的'%'
			(var)	映射变量(字典参数)
			m.n.	m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)
		**Python2.6 开始，新增了一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。
	Python三引号
		python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符
		eg:
			para_str = """这是一个多行字符串的实例
			多行字符串可以使用制表符
			TAB ( \t )。
			也可以使用换行符 [ \n ]。
			"""
			print (para_str)
	Python 的字符串内建函数
		序号	方法及描述
		1		
		capitalize()
		将字符串的第一个字符转换为大写
		2	
		center(width, fillchar)
		返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。
		3	
		count(str, beg= 0,end=len(string))
		返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数
		4	
		bytes.decode(encoding="utf-8", errors="strict")
		Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。
		5	
		encode(encoding='UTF-8',errors='strict')
		以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace'
		6	
		endswith(suffix, beg=0, end=len(string))
		检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.
		7	
		expandtabs(tabsize=8)
		把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。
		8	
		find(str, beg=0, end=len(string))
		检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1
		9	
		index(str, beg=0, end=len(string))
		跟find()方法一样，只不过如果str不在字符串中会报一个异常.
		10	
		isalnum()
		如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False
		11	
		isalpha()
		如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False
		12	
		isdigit()
		如果字符串只包含数字则返回 True 否则返回 False..
		13	
		islower()
		如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False
		14	
		isnumeric()
		如果字符串中只包含数字字符，则返回 True，否则返回 False
		15	
		isspace()
		如果字符串中只包含空白，则返回 True，否则返回 False.
		16	
		istitle()
		如果字符串是标题化的(见 title())则返回 True，否则返回 False
		17	
		isupper()
		如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False
		18	
		join(seq)
		以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串
		19	
		len(string)
		返回字符串长度
		20	
		ljust(width[, fillchar])
		返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。
		21	
		lower()
		转换字符串中所有大写字符为小写.
		22	
		lstrip()
		截掉字符串左边的空格或指定字符。
		23	
		maketrans()
		创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。
		24	
		max(str)
		返回字符串 str 中最大的字母。
		25	
		min(str)
		返回字符串 str 中最小的字母。
		26	
		replace(old, new [, max])
		把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。
		27	
		rfind(str, beg=0,end=len(string))
		类似于 find()函数，不过是从右边开始查找.
		28	
		rindex( str, beg=0, end=len(string))
		类似于 index()，不过是从右边开始.
		29	
		rjust(width,[, fillchar])
		返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串
		30	
		rstrip()
		删除字符串字符串末尾的空格.
		31	
		split(str="", num=string.count(str))
		num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串
		32	
		splitlines([keepends])
		按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。
		33	
		startswith(substr, beg=0,end=len(string))
		检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。
		34	
		strip([chars])
		在字符串上执行 lstrip()和 rstrip()
		35	
		swapcase()
		将字符串中大写转换为小写，小写转换为大写
		36	
		title()
		返回"标题化"的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())
		37	
		translate(table, deletechars="")
		根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中
		38	
		upper()
		转换字符串中的小写字母为大写
		39	
		zfill (width)
		返回长度为 width 的字符串，原字符串右对齐，前面填充0
		40	
		isdecimal()
		检查字符串是否只包含十进制字符，如果是返回s true，否则返回 false。

Python3 列表=================================================================================================================================
		序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。
	访问列表中的值
		使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符 eg:
			list1 = ['Google', 'Runoob', 1997, 2000];
			list2 = [1, 2, 3, 4, 5, 6, 7 ];
			print ("list1[0]: ", list1[0])
			print ("list2[1:5]: ", list2[1:5])
	更新列表	
		你可以对列表的数据项进行修改或更新，你也可以使用append()方法来添加列表项 eg:
		list = ['Google', 'Runoob', 1997, 2000]
		print ("第三个元素为 : ", list[2])
		list[2] = 2001
		print ("更新后的第三个元素为 : ", list[2])
	删除列表元素
		可以使用 del 语句来删除列表的的元素 eg:
			list = ['Google', 'Runoob', 1997, 2000]
			print ("原始列表 : ", list)
			del list[2]
			print ("删除第三个元素 : ", list)    输出结果，删除的索引位置不是null是直接就没有了，序列的大小减一
	Python列表脚本操作符
		列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表
		eg:
		Python 表达式							结果							描述
		len([1, 2, 3])							3								长度
		[1, 2, 3] + [4, 5, 6]					[1, 2, 3, 4, 5, 6]				组合
		['Hi!'] * 4								['Hi!', 'Hi!', 'Hi!', 'Hi!']	重复
		3 in [1, 2, 3]							True							元素是否存在于列表中
		for x in [1, 2, 3]: print(x, end=" ")	1 2 3							迭代
	Python列表截取与拼接
		与之前方式一样
	嵌套列表
		使用嵌套列表即在列表里创建其它列表
		eg：[['a', 'b', 'c'], [1, 2, 3]]    即Java中list中是list
	Python列表函数&方法
		函数：
			序号		函数
			1			len(list) 	列表元素个数
			2			max(list) 	返回列表元素最大值
			3			min(list) 	返回列表元素最小值
			4			list(seq) 	将元组转换为列表
		方法:
			序号	方法
			1		list.append(obj) 			在列表末尾添加新的对象
			2		list.count(obj) 			统计某个元素在列表中出现的次数
			3		list.extend(seq) 			在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）
			4		list.index(obj) 			从列表中找出某个值第一个匹配项的索引位置
			5		list.insert(index, obj) 	将对象插入列表
			6		list.pop([index=-1]) 		移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
			7		list.remove(obj) 			移除列表中某个值的第一个匹配项
			8		list.reverse() 				反向列表中元素
			9		list.sort( key=None, reverse=False) 	对原列表进行排序
			10		list.clear() 				清空列表
			11		list.copy() 				复制列表
			
Python3 元组=================================================================================================================================
			Python 的元组与列表类似，不同之处在于元组的元素不能修改。
			元组使用小括号，列表使用方括号。
			元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。
	访问元组
		元组可以使用下标索引来访问元组中的值 eg:
			tup1 = ('Google', 'Runoob', 1997, 2000)
			print ("tup1[0]: ", tup1[0], "tupe截取", tup1[1:5])
	修改元组
		元组中的元素值是不允许修改的，但我们可以对元组进行连接组合, 如下实例:
			tup1 = (12, 34.56);
			tup2 = ('abc', 'xyz')
			# 以下修改元组元素操作是非法的。
			# tup1[0] = 100
			# 创建一个新的元组
			tup3 = tup1 + tup2;
			print (tup3)
	删除元组
		元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:
			tup = ('Google', 'Runoob', 1997, 2000)
			del tup;
	元组运算符
		与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。
			Python 表达式						结果							描述
			len((1, 2, 3))						3								计算元素个数
			(1, 2, 3) + (4, 5, 6)				(1, 2, 3, 4, 5, 6)				连接
			('Hi!',) * 4						('Hi!', 'Hi!', 'Hi!', 'Hi!')	复制
			3 in (1, 2, 3)						True							元素是否存在
			for x in (1, 2, 3): print (x,)		1 2 3							迭代
	元组索引，截取
		和列表一样
	元组内置函数
		Python元组包含了以下内置函数
		序号		方法及描述										实例
		1			len(tuple) 计算元组元素个数。	
		3
		>>> 
		2			max(tuple) 返回元组中元素最大值。
		>>> 
		3	min(tuple) 返回元组中元素最小值。 
		4	tuple(seq) 将列表转换为元组。	 						>>> list1= ['Google', 'Taobao', 'Runoob', 'Baidu']
																	>>> tuple1=tuple(list1)
Python3 字典=================================================================================================================================
		字典是另一种可变容器模型，且可存储任意类型对象。
		字典的每个键值(key=>value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中 ,格式如下所示：
	访问字典里的值
		把相应的键放入到方括号中，如下实例: eg:
			dict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}
			print ("dict['Name']: ", dict['Name'])
		注意：如果用字典里没有的键访问数据  会报错
	修改字典
		向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对如下实例:
		eg:
			dict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}
			dict['Age'] = 8               # 更新 Age
			dict['School'] = "菜鸟教程"  # 添加信息
	删除字典元素
		能删单一的元素也能清空字典，清空只需一项操作。
		显示删除一个字典用del命令，如下实例：
		eg:
			dict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}
			del dict['Name'] # 删除键 'Name'
			dict.clear()     # 清空字典
			del dict         # 删除字典
		注：del() 方法后面也会讨论。
		
		字典键的特性
			字典值可以是任何的 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行。
			两个重要的点需要记住：
			1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，如下实例：
			2）键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行，如下实例：
	字典内置函数&方法
		函数:
			序号	函数及描述															实例
			1		len(dict)  计算字典元素个数，即键的总数								dict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}; len(dict)
			2		str(dict) 输出字典，以可打印的字符串表示。
			3		type(variable) 返回输入的变量类型，如果变量是字典就返回字典类型。
		方法：
			序号	函数及描述
			1		radiansdict.clear() 删除字典内所有元素
			2		radiansdict.copy() 返回一个字典的浅复制
			3		radiansdict.fromkeys() 创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值
			4		radiansdict.get(key, default=None) 返回指定键的值，如果值不在字典中返回default值
			5		key in dict 如果键在字典dict里返回true，否则返回false
			6		radiansdict.items() 以列表返回可遍历的(键, 值) 元组数组
			7		radiansdict.keys() 返回一个迭代器，可以使用 list() 来转换为列表
			8		radiansdict.setdefault(key, default=None) 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default
			9		radiansdict.update(dict2) 把字典dict2的键/值对更新到dict里
			10		radiansdict.values() 返回一个迭代器，可以使用 list() 来转换为列表
			11		pop(key[,default]) 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。
			12		popitem() 随机返回并删除字典中的最后一对键和值。
			
Python3 集合=================================================================================================================================
		集合（set）是一个无序的不重复元素序列。	
		可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典
	集合的基本操作
		1、添加元素
			格式：s.add( x )
				将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。
			
			还有一个方法，也可以添加元素，且参数可以是列表，元组，字典等，语法格式如下：
				s.update( x )
				eg:
					>>>thisset = set(("Google", "Runoob", "Taobao"))
					>>> thisset.update({1,3})
					>>> print(thisset)
					{1, 3, 'Google', 'Taobao', 'Runoob'}
		2、移除元素
			格式：s.remove( x )
				将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。
			
			此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。格式如下所示：
				s.discard( x )
				eg:
					>>>thisset = set(("Google", "Runoob", "Taobao"))
					>>> thisset.discard("Facebook")  # 不存在不会发生错误
					>>> print(thisset)
					{'Taobao', 'Google', 'Runoob'}
			我们也可以设置随机删除集合中的一个元素，语法格式如下：
				s.pop() 
				脚本模式实例(Python 3.0+)
					thisset = set(("Google", "Runoob", "Taobao", "Facebook"))
					x = thisset.pop()
					print(x)
				多次执行测试结果都不一样。
				然而在交互模式，pop 是删除集合的第一个元素（排序后的集合的第一个元素）。
		3、计算集合元素个数
			len(s)
		4、清空集合	
			s.clear()
		5、判断元素是否在集合中存在
			x in s
		集合内置方法完整列表
			方法					描述
			add()					为集合添加元素
			clear()					移除集合中的所有元素
			copy()					拷贝一个集合
			difference()			返回多个集合的差集
			difference_update()		移除集合中的元素，该元素在指定的集合也存在。
			discard()				删除集合中指定的元素
			intersection()			返回集合的交集
			intersection_update()	返回集合的交集。
			isdisjoint()			判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。
			issubset()				判断指定集合是否为该方法参数集合的子集。
			issuperset()			判断该方法的参数集合是否为指定集合的子集
			pop()					随机移除元素
			remove()				移除指定元素
			symmetric_difference()	返回两个集合中不重复的元素集合。
			symmetric_difference_update()	移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。
			union()					返回两个集合的并集
			update()				给集合添加元素












































